S - single responsibility principle
o - open & closed principle
L - Leskov's substitution principle
I - Interface segregation principle
D - Dependency inversion principle

S - this principle states that a class should only have one responsibility. Furthermore, it should only have one reason to
change.Every java class must perform a single functionality.
Testing – A class with one responsibility will have far fewer test cases.
Lower coupling – Less functionality in a single class will have fewer dependencies.
Organization – Smaller, well-organized classes are easier to search than monolithic ones.


O - classes should be open for extension but closed for modification. In doing so, we stop ourselves from modifying
existing code and causing potential new bugs in an otherwise happy application.Of course, the one exception to the rule
is when fixing bugs in existing code.

LSP - f class A is a subtype of class B, we should be able to replace B with A without disrupting the behavior of our
program.

ISP -  larger interfaces should be split into smaller ones. By doing so, we can ensure that implementing classes only
need to be concerned about the methods that are of interest to them.The goal is similar to single responsibility principle

DIP - The principle of dependency inversion refers to the decoupling of software modules. This way, instead of high-level
modules depending on low-level modules, both will depend on abstractions.e.g : you swipe your card - the cashier doesn't ask
whether its credit card or debit card.

